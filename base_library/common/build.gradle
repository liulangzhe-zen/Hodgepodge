apply plugin: 'com.android.library'
apply plugin: 'org.greenrobot.greendao'


android {
    compileSdkVersion rootProject.ext.android["compileSdkVersion"]
    buildToolsVersion rootProject.ext.android["buildToolsVersion"]
    lintOptions {
        checkReleaseBuilds false
        // Or, if you prefer, you can continue to check for errors in release builds,
        // but continue the build even when errors are found:
        abortOnError false
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    defaultConfig {
        minSdkVersion rootProject.ext.android["minSdkVersion"]
        targetSdkVersion rootProject.ext.android["targetSdkVersion"]
        versionCode rootProject.ext.android["versionCode"]
        versionName rootProject.ext.android["versionName"]

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles 'consumer-rules.pro'
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }



}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    api rootProject.ext.dependencies["appcompat"]
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test:runner:1.2.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'

    api rootProject.ext.dependencies["lottie"]
    api rootProject.ext.dependencies["immersionbar"]
    api rootProject.ext.dependencies["immersionbarComponentsVersion"]


    api rootProject.ext.dependencies["design"]
    api rootProject.ext.dependencies["update-app"]
    api rootProject.ext.dependencies["smartRefreshLayout"]
    api rootProject.ext.dependencies["SmartRefreshHeader"]



    api rootProject.ext.dependencies["scaleImageView"]
    api rootProject.ext.dependencies["photoview"]
    api rootProject.ext.dependencies["pickerView"]
    api rootProject.ext.dependencies["logger"]
    api rootProject.ext.dependencies["timber"]


    api rootProject.ext.dependencies["canary-debug"]
    api rootProject.ext.dependencies["butterknife"]
    api rootProject.ext.dependencies["butterknife-compiler"]


    api rootProject.ext.dependencies["otto"]
    api rootProject.ext.dependencies["multidex"]
    api(rootProject.ext.dependencies["arouter"]) {
        exclude module: 'support-v4'
        exclude module: 'support-annotations'
    }


    api rootProject.ext.dependencies["glide"]
    api rootProject.ext.dependencies["glide-compiler"]

    api rootProject.ext.dependencies["okhttp3"]


    api rootProject.ext.dependencies["dagger2"]
    annotationProcessor rootProject.ext.dependencies["dagger2-compiler"]
    api rootProject.ext.dependencies["gson"]





    //rx
    api rootProject.ext.dependencies["rxjava2"]
    api(rootProject.ext.dependencies["rxandroid2"]) {
        exclude module: 'rxjava'
    }
    api(rootProject.ext.dependencies["rxcache2"]) {
        exclude module: 'rxjava'
        exclude module: 'dagger'
        exclude module: 'api'
    }

    //network
    api(rootProject.ext.dependencies["retrofit"]) {
        exclude module: 'okhttp'
        exclude module: 'okio'
    }
    implementation(rootProject.ext.dependencies["retrofit-converter-gson"]) {
        exclude module: 'gson'
        exclude module: 'okhttp'
        exclude module: 'okio'
        exclude module: 'retrofit'
    }
    implementation(rootProject.ext.dependencies["retrofit-adapter-rxjava2"]) {
        exclude module: 'rxjava'
        exclude module: 'okhttp'
        exclude module: 'retrofit'
        exclude module: 'okio'
    }

    api(rootProject.ext.dependencies["glide"]) {
        exclude module: 'support-annotations'
        exclude module: 'support-compat'
    }
    annotationProcessor(rootProject.ext.dependencies["glide-compiler"]) {
        exclude module: 'jsr305'
        exclude module: 'support-annotations'
        exclude module: 'support-compat'
    }

    api('com.github.chrisbanes:PhotoView:2.3.0') {
        exclude module: "support-v4"
        exclude module: "support-compat"
        exclude module: 'rxjava'
        exclude module: 'retrofit'
        exclude module: 'appcompat-v7'
        exclude module: 'support-v4'
        exclude module: 'support-annotations'
        exclude module: 'support-core-utils'
        exclude module: 'support-media-compat'
        exclude module: 'support-vector-drawable'
        exclude module: 'support-fragment'
        exclude module: 'multidex'
        exclude module: 'rxandroid'
        exclude module: 'gson'
        exclude module: 'okio'
    }

    //    字体库
    implementation 'uk.co.chrisjenx:calligraphy:2.3.0'
    //    bugly
    api 'com.tencent.bugly:crashreport_upgrade:1.3.4'
    api 'com.tencent.bugly:nativecrashreport:3.6.0'

    //视频播放器
    api 'tv.danmaku.ijk.media:ijkplayer-java:0.8.8'

    //数据库
    api rootProject.ext.dependencies["greenDao"]


    api 'com.trello.rxlifecycle3:rxlifecycle:3.1.0'
    api 'com.trello.rxlifecycle3:rxlifecycle-android:3.1.0'
    api 'com.trello.rxlifecycle3:rxlifecycle-components:3.1.0'

    //    walle打包
    api 'com.meituan.android.walle:library:1.1.6'
    api 'com.github.bumptech.glide:annotations:4.8.0'

    api "com.github.VictorAlbertos.RxCache:runtime:1.8.1-2.x"
    api 'com.github.VictorAlbertos.Jolyglot:gson:0.0.3'

    debugImplementation 'com.squareup.leakcanary:leakcanary-android:1.6.2'
    releaseImplementation 'com.squareup.leakcanary:leakcanary-android-no-op:1.6.2'
    debugImplementation 'com.squareup.leakcanary:leakcanary-support-fragment:1.6.2'

}
